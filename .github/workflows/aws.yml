name: Deploy to Amazon ECS

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-west-2                         # Preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: github-actions-repo           # Amazon ECR repository name
  # ECS_SERVICE: github-actions-demo-service     # Amazon ECS Service name
  ECS_CLUSTER: Test_Cluster                     # Amazon ECS cluster name
  ECS_TASK_DEFINITION: task-definition.json     # Path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  CONTAINER_NAME: app                           # set this to the name of the container in the containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition With Single Task
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        # service: ${{env.ECS_SERVICE}}
        run-task: true
        run-task-subnets: subnet-0a8c655cf67ad8569, subnet-050d0ff4f68609a44, subnet-007a219dab144c08b, subnet-0f79c756bc6800249
        run-task-assign-public-IP: ENABLED
        run-task-security-groups: sg-0bdcba79e0cb901a4
        run-task-launch-type: FARGATE
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-task-stopped: false
        
# --------------------------
# run-task: true
# run-task-launch-type: FARGATE
# run-task-subnets: subnet-0a8c655cf67ad8569, subnet-050d0ff4f68609a44, subnet-007a219dab144c08b, subnet-0f79c756bc6800249
# run-task-security-groups: sg-0bdcba79e0cb901a4
# run-task-assign-public-IP: ENABLED

